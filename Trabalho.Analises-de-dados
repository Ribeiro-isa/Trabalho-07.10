#Integrantes:
#Isadora Ribeiro Eug√™nio
#R.A.: 42322274
#Samuel Pereira dos Santos
#R.A.:422220417
#Erick Vinicius S. Marques
#R.A.:4251923769




                  # Quest√£o - 01
# 1.1 - Recebe o nome e a nota de 10 alunos
alunos = {}

for i in range(10):
    nome = input(f"Digite o nome do {i+1}¬∫ aluno: ")
    while True:
        try:
            nota = float(input(f"Digite a nota de {nome}: "))
            break
        except ValueError:
            print("Entrada inv√°lida! Digite um n√∫mero.")
    alunos[nome] = nota

# 1.2 - Calcula a m√©dia das notas
media = sum(alunos.values()) / len(alunos)

# 1.3 - Imprime a m√©dia
print(f"\nüìä M√©dia da turma: {media:.2f}")

# 1.4 - Imprime maior e menor nota e quem obteve
maior_nota = max(alunos.values())
menor_nota = min(alunos.values())

print("\nüèÜ Maior nota:", maior_nota)
for nome, nota in alunos.items():
    if nota == maior_nota:
        print(f" - {nome}")

print("\nüîª Menor nota:", menor_nota)
for nome, nota in alunos.items():
    if nota == menor_nota:
        print(f" - {nome}")

# 1.5 - Lista dos alunos abaixo da m√©dia
print("\nüìâ Alunos abaixo da m√©dia:")
for nome, nota in alunos.items():
    if nota < media:
        print(f"{nome}: {nota}")

# 1.6 - Lista dos alunos iguais ou acima da m√©dia
print("\nüìà Alunos iguais ou acima da m√©dia:")
for nome, nota in alunos.items():
    if nota >= media:
      print(f"{nome}: {nota}")
# --------
# Quest√£o - 02
# 2.1 Receba do usuario 10 n√∫meros inteiros e coloque em uma estrutura de dados
numeros = []

for i in range(10):
    while True:
        try:
            num = int(input(f"Digite o {i+1}¬∫ n√∫mero inteiro: "))
            numeros.append(num)
            break
        except ValueError:
            print("Entrada inv√°lida! Digite um n√∫mero inteiro.")

#2.2 Na sequ√™ncia solicite ao usu√°rio que informe um novo n√∫mero inteiro, e verifique se este n√∫mero encontra-se registrado
while True:
    try:
        novo_numero = int(input("\nDigite um novo n√∫mero inteiro para verificar: "))
        break
    except ValueError:
        print("Entrada inv√°lida! Digite um n√∫mero inteiro.")

#2.3 Caso positivo, imprima a(s) posi√ß√£o(√µes) em que este n√∫mero estiver na estrutura. Caso contr√°rio, exiba uma mensagem avisando ao usu√°rio informando que o n√∫mero n√£o se encontra na estrutura.
posicoes = []
for i in range(len(numeros)):
    if numeros[i] == novo_numero:
        posicoes.append(i)

if posicoes:
    print(f"O n√∫mero {novo_numero} est√° na estrutura na(s) posi√ß√£o(√µes): {posicoes}")
else:
    print(f"O n√∫mero {novo_numero} n√£o se encontra na estrutura.")
# -------------
# Quest√£o - 03

# 3.1 Receba do usu√°rio 10 n√∫meros inteiros e guarde em uma estrutura de dados.
numeros = []

for i in range(10):
    while True:
        try:
            num = int(input(f"Digite o {i+1}¬∫ n√∫mero inteiro: "))
            numeros.append(num)
            break
        except ValueError:
            print("Entrada inv√°lida! Digite um n√∫mero inteiro.")

# 3.2 Em seguida, troque todos os valores negativos do vetor por 0.
for i in range(len(numeros)):
    if numeros[i] < 0:
        numeros[i] = 0

# 3.3 Imprima o resultado dos dados alterados.
print("\nLista final (negativos trocados por 0):")
print(numeros)
# ----------------
# Quest√£o - 04
# 4.1 Pe√ßa ao usu√°rio os 6 n√∫meros que ele jogou.
numeros_jogados = []

# 4.2 Solicite ao usu√°rio que informe iniciamente os 6 n√∫meros sorteados na Mega Sena.
for i in range(6):
    while True:
        try:
            num = int(input(f"Digite o {i+1}))¬∫ n√∫mero sorteado (1 a 60): "))
            if 1 <= num <= 60:
                numeros_jogados.append(num)
                break
            else:
                print("N√∫mero inv√°lido! Digite um n√∫mero entre 1 e 60.")

# 4.3 Imprima a quantidade de pontos que ele fez no concurso. 
print("\nN√∫meros jogados:", numeros_jogados)
# -----------
# Quest√£o - 05
# Fun√ß√£o de soma (direta)
def soma(a, b):
    return a + b

# Fun√ß√£o de subtra√ß√£o (direta)
def subtracao(a, b):
    return a - b

# Multiplica√ß√£o usando somas sucessivas
def multiplicacao(a, b):
    resultado = 0
    negativo = False
    
    # Tratar n√∫meros negativos
    if b < 0:
        b = -b
        negativo = True
    
    for _ in range(b):
        resultado = soma(resultado, a)
    
    return -resultado if negativo else resultado

# Potencia√ß√£o usando multiplica√ß√£o sucessiva
def potencia(a, b):
    resultado = 1
    for _ in range(b):
        resultado = multiplicacao(resultado, a)
    return resultado

# Programa principal
def main():
    print("=== Atividade 5 ===")
    a = int(input("Digite o primeiro n√∫mero: "))
    b = int(input("Digite o segundo n√∫mero: "))

    while True:
        print("\nEscolha a opera√ß√£o:")
        print("1 - Soma")
        print("2 - Subtra√ß√£o")
        print("3 - Multiplica√ß√£o")
        print("4 - Potencia√ß√£o")
        print("0 - Sair")

        opcao = input("Op√ß√£o: ")

        if opcao == "1":
            print(f"Resultado da soma: {soma(a, b)}")
        elif opcao == "2":
            print(f"Resultado da subtra√ß√£o: {subtracao(a, b)}")
        elif opcao == "3":
            print(f"Resultado da multiplica√ß√£o: {multiplicacao(a, b)}")
        elif opcao == "4":
            print(f"Resultado da pot√™ncia: {potencia(a, b)}")
        elif opcao == "0":
            print("Encerrando o programa...")
            break
        else:
            print("Op√ß√£o inv√°lida!")

# Executar
main()


        print(f"{nome}: {nota}")
